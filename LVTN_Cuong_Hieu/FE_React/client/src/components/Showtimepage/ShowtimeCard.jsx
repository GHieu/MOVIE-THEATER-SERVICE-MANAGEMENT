import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import MovieCard from './MovieShowtimeCard';
import LoginModal from '../MovieNavbar/LoginModal'; // Import LoginModal
import RegisterModal from '../MovieNavbar/RegisterModal'; // Import RegisterModal

export default function ShowtimeCard({ movie, showtimes = [], selectedDate, reviews = [] }) {
  const navigate = useNavigate();
  const [selectedShowtime, setSelectedShowtime] = useState(null);
  
  // State cho c·∫£ 2 modal - gi·ªëng nh∆∞ trong ShowTimeTabs
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);

  // H√†m chuy·ªÉn ƒë·ªïi room type
  const translateRoomType = (roomType) => {
    const roomTypeMap = {
      '2Dsub': '2D Ph·ª• ƒë·ªÅ',
      '2Dcap': '2D L·ªìng ti·∫øng',
      '3Dsub': '3D Ph·ª• ƒë·ªÅ',
      '3Dcap': '3D L·ªìng ti·∫øng',
      'IMAXsub': 'IMAX Ph·ª• ƒë·ªÅ',
      'IMAXcap': 'IMAX L·ªìng ti·∫øng',
      // C√°c lo·∫°i ph√≤ng kh√°c
      'Standard': 'Ph√≤ng ti√™u chu·∫©n',
      'VIP': 'Ph√≤ng VIP',
      'Premium': 'Ph√≤ng cao c·∫•p',
      'Gold': 'Ph√≤ng Gold',
      'Platinum': 'Ph√≤ng Platinum',
      'Director': 'Ph√≤ng ƒë·∫°o di·ªÖn',
      'Couple': 'Ph√≤ng ƒë√¥i',
      'Family': 'Ph√≤ng gia ƒë√¨nh'
    };
    
    return roomTypeMap[roomType] || roomType || 'Kh√°c';
  };

  // H√†m ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p (gi·ªëng ShowTimeTabs)
  const isUserLoggedIn = () => {
    // Ki·ªÉm tra token trong localStorage ho·∫∑c cookie
    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    return !!token;
    
    // Ho·∫∑c n·∫øu b·∫°n s·ª≠ d·ª•ng context/redux ƒë·ªÉ qu·∫£n l√Ω user state:
    // return !!user || !!currentUser;
  };

  // H√†m x·ª≠ l√Ω khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  const handleLoginSuccess = () => {
    setIsLoginModalOpen(false);
    // Ti·∫øp t·ª•c v·ªõi booking n·∫øu c√≥ showtime ƒë∆∞·ª£c ch·ªçn
    if (selectedShowtime) {
      proceedToBooking(selectedShowtime);
      setSelectedShowtime(null);
    }
  };

  // H√†m ƒë√≥ng t·∫•t c·∫£ modal - gi·ªëng nh∆∞ trong ShowTimeTabs
  const handleCloseModals = () => {
    setIsLoginModalOpen(false);
    setIsRegisterModalOpen(false);
    setSelectedShowtime(null);
  };

  // H√†m chuy·ªÉn t·ª´ Login sang Register - gi·ªëng nh∆∞ trong ShowTimeTabs
  const handleSwitchToRegister = () => {
    setIsLoginModalOpen(false);
    setIsRegisterModalOpen(true);
  };

  // H√†m chuy·ªÉn t·ª´ Register sang Login - gi·ªëng nh∆∞ trong ShowTimeTabs
  const handleSwitchToLogin = () => {
    setIsRegisterModalOpen(false);
    setIsLoginModalOpen(true);
  };

  // H√†m refresh user data - c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ c·∫£ 2 modal
  const refreshUser = () => {
    console.log('Refresh user data');
    handleLoginSuccess();
  };

  // H√†m th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang booking
  const proceedToBooking = (showtime) => {
    if (!showtime.id) return;

    navigate(`/booking/${movie.id}`, {
      state: {
        date: selectedDate,
        time: showtime.start_time || showtime.show_time,
        showtime,
      },
    });
  };

  const groupedByRoomType = useMemo(() => {
    return showtimes.reduce((acc, st) => {
      const type = st.room?.type || "Kh√°c";
      const translatedType = translateRoomType(type);
      if (!acc[translatedType]) acc[translatedType] = [];
      acc[translatedType].push(st);
      return acc;
    }, {});
  }, [showtimes]);

  // X·ª≠ l√Ω khi click v√†o su·∫•t chi·∫øu
  const handleClickShowtime = (showtime) => {
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if (!isUserLoggedIn()) {
      // L∆∞u showtime ƒë∆∞·ª£c ch·ªçn v√† hi·ªÉn th·ªã modal ƒëƒÉng nh·∫≠p
      setSelectedShowtime(showtime);
      setIsLoginModalOpen(true);
      return;
    }

    // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, chuy·ªÉn th·∫≥ng ƒë·∫øn booking
    proceedToBooking(showtime);
  };

  // H√†m ƒë√≥ng LoginModal
  const handleCloseLoginModal = () => {
    handleCloseModals();
  };

  // Format time from datetime string
  const formatTime = (datetime) => {
    if (!datetime) return '';
    try {
      const date = new Date(datetime);
      if (isNaN(date.getTime())) {
        console.warn('Invalid time string:', datetime);
        return '';
      }
      return date.toLocaleTimeString('vi-VN', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false
      });
    } catch (error) {
      console.error('Error formatting time:', error);
      return '';
    }
  };

  // Format duration
  const formatDuration = (duration) => {
    if (!duration) return 'N/A';
    if (typeof duration === 'string' && duration.includes('ph√∫t')) {
      return duration;
    }
    return `${duration} ph√∫t`;
  };

  return (
    <div className="bg-white border rounded-lg p-4 mb-4">
      <div className="flex gap-4">
        {/* Movie Poster */}
        <div className="flex-shrink-0">
          <MovieCard movie={movie} reviews={reviews} />
        </div>

        {/* Movie Info and Showtimes */}
        <div className="flex-1">
          <div className="flex justify-between items-start mb-3">
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-1">{movie.title}</h3>
              <div className="flex items-center gap-4 text-sm text-gray-600 mb-2">
                <span className="flex items-center gap-1">
                  <span className="text-blue-600">üé¨</span>
                  {movie.genre || movie.genres || 'Phim chi·∫øu r·∫°p'}
                </span>
                <span className="flex items-center gap-1">
                  <span className="text-orange-500">‚è±</span>
                  {formatDuration(movie.duration)}
                </span>
                {movie.nation && (
                  <span className="flex items-center gap-1">
                    <span className="text-purple-600">üåê</span>
                    {movie.nation}
                  </span>
                )}
              </div>
              
              {movie.description && (
                <p className="text-sm text-gray-600 line-clamp-2 max-w-2xl">
                  {movie.description}
                </p>
              )}
            </div>
            
            {(movie.rating || movie.imdb_rating) && (
              <div className="flex items-center gap-2 text-sm">
                <span className="text-yellow-500">‚≠ê</span>
                <span className="font-semibold">{movie.rating || movie.imdb_rating}</span>
              </div>
            )}
          </div>

          <div className="flex items-center gap-4 text-xs text-gray-500 mb-3">
            {movie.director && (
              <span>ƒê·∫°o di·ªÖn: <span className="text-gray-700">{movie.director}</span></span>
            )}
            {movie.cast && (
              <span>Di·ªÖn vi√™n: <span className="text-gray-700">{movie.cast}</span></span>
            )}
            {movie.studio && (
              <span>Nh√† s·∫£n xu·∫•t: <span className="text-gray-700">{movie.studio}</span></span>
            )}
            {movie.release_date && (
              <span>Kh·ªüi chi·∫øu: <span className="text-gray-700">
                {new Date(movie.release_date).toLocaleDateString('vi-VN')}
              </span></span>
            )}
          </div>

          <div>
            {Object.entries(groupedByRoomType).map(([roomType, group]) => (
              <div key={roomType} className="mb-6">
                <div className="mb-3">
                  <span className="text-lg font-semibold text-gray-700">{roomType}</span>
                </div>

                <div className="flex flex-wrap gap-2">
                  {group.map(showtime => (
                    <button
                      key={showtime.id}
                      onClick={() => handleClickShowtime(showtime)}
                      className="border-2 border-gray-300 px-4 py-2 rounded-md hover:border-black hover:bg-gray-100 transition-colors cursor-pointer"
                    >
                      <div className="text-lg font-bold text-gray-800">
                        {formatTime(showtime.start_time)}
                      </div>
                      <div className="text-xs text-gray-500">
                        {showtime.room?.name || 'Ph√≤ng chi·∫øu'}
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* LoginModal v·ªõi kh·∫£ nƒÉng chuy·ªÉn ƒë·ªïi - gi·ªëng nh∆∞ trong ShowTimeTabs */}
      <LoginModal
        isOpen={isLoginModalOpen}
        onClose={handleCloseModals}
        onSwitchToRegister={handleSwitchToRegister}
        refreshUser={refreshUser}
      />

      {/* RegisterModal v·ªõi kh·∫£ nƒÉng chuy·ªÉn ƒë·ªïi - gi·ªëng nh∆∞ trong ShowTimeTabs */}
      <RegisterModal 
        isOpen={isRegisterModalOpen}
        onClose={handleCloseModals}
        onSwitchToLogin={handleSwitchToLogin}
      />
    </div>
  );
}